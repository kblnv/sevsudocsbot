# –§–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup

from keyboards import user
from database import db

async def questions_callback_handler(callback: types.CallbackQuery):
    (_, id) = callback.data.split('_')
    (id, title, text) = db.fetch_one_question(id)
    await callback.message.answer(text)
    await callback.answer()

async def start_handler(message: types.Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –∏ /help """
    await message.answer("–°—Ç–∞—Ä—Ç —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞!", reply_markup=user.ureply_keyboard)

# TODO –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∏–¥–∞ Text(equals="–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã"), Text(equals="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def echo_handler(message: types.Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π """
    if (message.text == "–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã üìÑ"):
        markup = InlineKeyboardMarkup(row_width=1)
        questions = db.fetch_all_questions()
        user.generate_inline_buttons(markup, questions)
        await message.answer("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:", reply_markup=markup)
    elif (message.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è"):
        await message.answer(message.text)

def register_handlers(dp: Dispatcher) -> None:
    """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ """
    dp.register_callback_query_handler(
        questions_callback_handler,
        lambda callback: callback.data.startswith("btn_")
    )
    dp.register_message_handler(start_handler, commands=["start", "help"])
    dp.register_message_handler(echo_handler)