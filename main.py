# –§–∞–π–ª - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –±–æ—Ç–∞

from logging import basicConfig, INFO
from aiogram import Bot, Dispatcher, executor

import config
from handlers import user


bot = Bot(token=config.API_TOKEN)
dp = Dispatcher(bot)

# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
basicConfig(level=INFO)


async def on_startup(_):
    """ –§—É–Ω–∫—Ü–∏—è, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ """
    pass

def main():
    """ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ """
    user.register_handlers(dp)  # –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ user
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

button_hi = KeyboardButton('–ó–¥–∞—Ä–æ–≤–∞, –æ—á–µ—Ä–µ–¥–Ω—è—Ä–∞! üëã', callback_data='buttonhi')

Arthas = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–ª—é—Å –º–æ—Ä–∞–ª—å", url="https://www.youtube.com/c/SpitefulDick"))
set_button_inline = InlineKeyboardMarkup().add(button_hi)

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!", reply_markup = set_button_inline)

@dp.callback_query_handler(lambda c: c.data == 'buttonhi')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–†–æ—Ç–∏–∫ –∑–∞–∫—Ä—ã—Ç, –∞ –∂–∏–≤–æ—Ç–∏–∫ —Ç–æ —É—Ä—á–∏—Ç...', reply_markup = Arthas)


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply("–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Ç–µ–±–µ –≤ –æ—Ç–≤–µ—Ç!")


@dp.message_handler(commands=['zxc'])
async def process_zxc_command(msg):
    for i in range(1000,13,-7):
        await bot.send_message(msg.from_user.id, str(i) + " - 7 = " + str(i-7))
        await asyncio.sleep(0.2)


@dp.message_handler()
async def echo_message(msg: types.Message):
    await bot.send_message(msg.from_user.id, msg.text)
    
if __name__ == "__main__":
    main()
